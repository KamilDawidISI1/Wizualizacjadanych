zad1

class Fruit:
    def __init__(self, color, weight = 0.5):
        self.color = color
        self.weight = weight

class Apple(Fruit):


    def isfresh(self):
        if self.color == "red" or self.color == "green":
            return True
        else:
            return False

class Banana(Fruit):


    def isfresh(self):
        if self.color == "yellow":
            return True
        else:
            return False

class Orange(Fruit):


    def isfresh(self):
        if self.color == "orange":
            return True
        else:
            return False



jablko = Apple("red")
print("Czy jablka są świerze: "+str(jablko.isfresh())+", a mamy ich "+ str(jablko.weight)+"kg")

pomarancza = Orange("green", 6)
print("Czy pomarancze są świerze: "+str(pomarancza.isfresh())+", a mamy ich "+ str(pomarancza.weight)+"kg")

banan = Banana("yellow", 2)

print("Czy banany są świerze: "+str(banan.isfresh())+", a mamy ich "+ str(banan.weight)+"kg")

--------------------------------------------------------------------

zad 2

class Account:
    def __init__(self, account_number, balance=0):
        self.account_number = account_number
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            print("Brak wystraczajacych srodkow na koncie")
        else:
            self.balance -= amount

    def transfer(self, amount, to_account):
        if amount > self.balance:
            print("Brak wystraczajacych srodkow na koncie")
        else:
            self.withdraw(amount)
            to_account.deposit(amount)


class PrivateAccount(Account):
    def __init__(self, account_number, balance=0, salary=0):
        super().__init__(account_number, balance)
        self.salary = salary

    def salary_transfer(self):
        self.deposit(self.salary)


class FirmAccount(Account):
    def __init__(self, account_number, balance=0, zus_number=None):
        super().__init__(account_number, balance)
        self.zus = zus_number

    def pay_zus(self, amount):
        self.withdraw(amount)
        print("Platnosc podatku w wysokosci {} przekazana dla ZUS: {}".format(amount, self.zus))


mojeKonto = PrivateAccount(111111, 1000, 1000)
kontoMarka = PrivateAccount(222222, 500, 1500)
mojaFirma = FirmAccount(222222, 2000, 101010)
print(mojaFirma.balance)
mojaFirma.pay_zus(500)
print(mojaFirma.balance)

print("\n")
print("Przed przelewem z mojego konta do Marka 500 zl\n")

print("Stan mojego konta: {}".format(mojeKonto.balance))
print("Stan konta Marka: {}".format(kontoMarka.balance))
mojeKonto.transfer(500, kontoMarka)
print("\n")
print("Po przelewem z mojego konta do Marka 500 zl\n")

print("Stan mojego konta: {}".format(mojeKonto.balance))
print("Stan konta Marka: {}".format(kontoMarka.balance))
print("\n")

print("Przed wyplata\n")
print("Stan mojego konta: {}".format(mojeKonto.balance))
mojeKonto.salary_transfer()
print("Po wyplacie\n")
print("Stan mojego konta: {}".format(mojeKonto.balance))

----------------------------------------------------------------------------------------
zad3

(dużo pomógł chatGPT)

class Romanian:
    roman_numerals = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
    arabic_numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]

    def __init__(self, value):
        if isinstance(value, str):
            self.value = self.roman_to_arabic(value)
        elif isinstance(value, int):
            self.value = value
        else:
            self.value = None

    def __str__(self):
        if self.value is None:
            return "Invalid Roman numeral"
        return self.arabic_to_roman(self.value)

    def __int__(self):
        if self.value is None:
            return 0
        return self.value

    def __add__(self, other):
        if isinstance(other, Romanian):
            return Romanian(self.value + other.value)
        elif isinstance(other, int):
            return Romanian(self.value + other)
        else:
            return None

    def __sub__(self, other):
        if isinstance(other, Romanian):
            return Romanian(self.value - other.value)
        elif isinstance(other, int):
            return Romanian(self.value - other)
        else:
            return None

    def __mul__(self, other):
        if isinstance(other, Romanian):
            return Romanian(self.value * other.value)
        elif isinstance(other, int):
            return Romanian(self.value * other)
        else:
            return None

    def arabic_to_roman(self, num):
        if num < 1 or num > 3999:
            return "Liczby rzymskie nie sa ujemne ani wieksze od 3999"
        roman_num = ''
        i = 0
        while num > 0:
            for _ in range(num // self.arabic_numbers[i]):
                roman_num += self.roman_numerals[i]
                num -= self.arabic_numbers[i]
            i += 1
        return roman_num

    def roman_to_arabic(self, roman_num):
        if not all(char in self.roman_numerals for char in roman_num):
            return 0
        arabic_num = 0
        i = 0
        while i < len(roman_num):
            current_char = roman_num[i]
            current_value = self.arabic_numbers[self.roman_numerals.index(current_char)]
            if i+1 < len(roman_num):
                next_char = roman_num[i+1]
                next_value = self.arabic_numbers[self.roman_numerals.index(next_char)]
                if current_value >= next_value:
                    arabic_num += current_value
                    i += 1
                else:
                    arabic_num += next_value - current_value
                    i += 2
            else:
                arabic_num += current_value
                i += 1
        return arabic_num

x = Romanian("III")
y = Romanian(3000)
z = Romanian('D')

print(x) 
print(y) 
print(z) 
print(int(x)) 
print(int(z))
print(str(y)) 
print(x + y) 
print(int(x + y))
print(x-y)
print(int((x-y)))
print(x*2)
print(int((x*2)))
print(x*y)
print(int((x*y)))
print(x + y + z) 
print(int(x + y + z))
